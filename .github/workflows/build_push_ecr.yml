name: Build, Test, and Push to ECR

on:
  push:
    branches:
      - main

jobs:
  build:
    name: CI for MyApp + MySQL
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout your code
    - name: Checkout source code
      uses: actions/checkout@v3

    # Step 2: Set up AWS credentials from GitHub secrets
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: us-east-1

    # Step 3: Login to ECR
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # Step 4: Build Flask App (myapp)
    - name: Build MyApp Docker image
      run: docker build -t myapp -f Dockerfile .

    # Step 5: Run Unit Test with Required Env Vars
    - name: Smoke Test MyApp
      run: |
        docker run -d \
          -p 8080:81 \
          --name test-app \
          -e DBHOST="localhost" \
          -e DBUSER="root" \
          -e DBPWD="pw" \
          -e DATABASE="employees" \
          -e GROUP_NAME="TestGroup" \
          -e GROUP_SLOGAN="Testing Pipeline" \
          -e S3_BUCKET_NAME="dummy-bucket" \
          -e S3_IMAGE_KEY="dummy.png" \
          -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
          -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
          -e AWS_SESSION_TOKEN="${{ secrets.AWS_SESSION_TOKEN }}" \
          -e AWS_DEFAULT_REGION="us-east-1" \
          myapp

        echo "üïê Waiting for app to start..."
        sleep 5
        echo "üîç Logs from container:"
        docker logs test-app

        echo "üåê Testing HTTP response..."
        curl --fail http://localhost:8080 || (echo "‚ùå App test failed"; exit 1)

        docker stop test-app && docker rm test-app

    # Step 6: Tag and Push MyApp to ECR
    - name: Push MyApp Image to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: clo835/webapp
        IMAGE_TAG: app-v0.1
      run: |
        docker tag myapp $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    # Step 7: Build and Push MySQL Image
    - name: Build and Push MySQL Image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: clo835/mysql
        IMAGE_TAG: mysql-v0.1
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile_mysql .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

